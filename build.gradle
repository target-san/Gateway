// Buildscript config prolog
buildscript {
   	repositories {
       	mavenCentral()
       	maven {
           	name = "forge"
           	url = "http://files.minecraftforge.net/maven"
       	}
       	maven {
           	name = "sonatype"
           	url = "https://oss.sonatype.org/content/repositories/snapshots/"
       	}
   	}
   	dependencies {
       	classpath "net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT"
   	}
}

def fromBuildNumber(build) {
	// Pre-config, this one retrieves Forge JSON info and deduces MC and Forge versions from Forge build number
	def verFile = file(".forge-version")
	if (!verFile.exists()) {
		def forgeJson = file(".forge-json")
		if (!forgeJson.exists()) {
    		new URL("http://files.minecraftforge.net/maven/net/minecraftforge/forge/json").withInputStream{ i -> forgeJson.withOutputStream{ it << i }}
		}
		def forgeData = new groovy.json.JsonSlurper().parse(forgeJson)
		def revData = forgeData.number[build]
		verFile.withWriter { out ->
			out.write "${revData.mcversion}-${revData.version}"
		}
	}
	// Read from verFile
	def fullVer = verFile.text.readLines()[0].trim()
	def (mcv, fv) = fullVer.split('\\-')
	def fb = fv.split('\\.')[3].trim()
	
	if (fb != build) {
		file(".forge-json").delete()
		file(".forge-version").delete()
		return fromBuildNumber(build)
	}
	return [
		full: fullVer,
		minecraft: mcv,
		forge: fv,
		build: fb
	]
}

def forgeVer = fromBuildNumber(file("forge").readLines()[0].trim())
// Config for all projects
allprojects {
	// plugins
	apply plugin: "scala"
	apply plugin: "forge"

	sourceSets.main {
       	java.srcDirs 'src'
       	scala.srcDirs 'src'
       	resources.srcDirs "resources"
	}
	
	minecraft {
		version = forgeVer.full
	}
}


subprojects {
	// Subprojects are built in 'build' folder hierarchically, according to their location
	buildDir new File( new File(rootProject.projectDir, "build"), project.name)

	version = "1.0"
	group = 'api'
	archivesBaseName = 'api-' + project.projectDir.name
}

def buildNumber = System.getenv("BUILD_NUMBER")
buildNumber = buildNumber ? "b" + buildNumber : "dev"
version = file("version").text + buildNumber
group= "targetsan.mcmods"
archivesBaseName = "gateway"

jar.classifier = "mc${forgeVer.minecraft}-forge${forgeVer.build}"

dependencies {
    compile project('api/NotEnoughItems'), project('api/CoFHLib'), project('api/AppEng2')
}
// Standard thing with setting properties in mcmod.info
processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version":project.version, "mcversion":project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
}
